#!/usr/bin/python

import numpy as np
import matplotlib.pyplot as plt
import re

ss_period_list = [1, 5, 10, 25, 50, 100, 150, 200, 250, 300, 350, 400];
models = ["pcs", "traffic", "epidemic"];

warped_data_path = "."

def filenames():
    for ssp in ss_period_list:
        filename = "8n7wt7sq{}ssp1000gvtp_block.csv".format(ssp)
        yield filename

def filter_total_lines(f):
    for line in f:
        if "Total" in line:
            yield line

def addPlotXY(plots, title, xlab, ylab, lines):
    new_plot = {"title": title, "xlabel": xlab, "ylabel": ylab, "lines": lines}
    plots.append(new_plot)

def addLineXY(lines, xvals, yvals, leg):
    new_line = {"xvals": xvals, "yvals": yvals, "legend_title": leg}
    lines.append(new_line)

def main():

    plots = list()

    speedup_lines = list()
    memory_lines = list()
    efficiency_lines = list()
    event_rate_lines = list()
    coasted_lines = list()
    rollback_lines = list()
    premote_lines = list()
    remote_lines = list()

    time_css = 0
    mem_css = 0

    for m in models:

        ssp_x = list()

        time_y = list()
        speedup_y = list()
        prb_y = list()
        srb_y = list()
        rb_y = list()
        rb_percent_y = list()
        mem_y = list()
        comm_y = list()
        proc_y = list()
        coast_y = list()
        localp_y = list()
        remotep_y = list()
        localn_y = list()
        remoten_y = list()

        f = filenames()
        for filename in f:
            # obtain configs from filename
            nodes, wt, sq, ssp, gvtp = re.findall(r'\d+', filename)

            with open("{}/{}/{}".format(warped_data_path, m, filename)) as plotpoint:
                ydata = np.genfromtxt(filter_total_lines(plotpoint), delimiter=",",
                    names=['node', 'time', 'objects', 'localp', 'remotep', 'localn', 'remoten',
                           'prollbacks', 'srollbacks', 'coasted','cancelled', 'processed',
                            'committed', 'memory'])

            ssp_x.append(ssp)

            if ssp == '1':
                time_css = np.mean(ydata['time'])
                mem_css = np.mean(ydata['memory'])

            time_y.append(np.mean(ydata['time']))
            prb_y.append(np.mean(ydata['prollbacks']))
            srb_y.append(np.mean(ydata['srollbacks']))
            mem_y.append(np.mean(ydata['memory']))
            comm_y.append(np.mean(ydata['committed']))
            proc_y.append(np.mean(ydata['processed']))
            coast_y.append(np.mean(ydata['coasted']))
            localp_y.append(np.mean(ydata['localp']))
            remotep_y.append(np.mean(ydata['remotep']))
            localn_y.append(np.mean(ydata['localn']))
            remoten_y.append(np.mean(ydata['remoten']))

        speedup_y = [time_css / y for y in time_y]
        event_rate = [a / b for a, b in zip(comm_y, time_y)]
        mem_reduction = [(mem_css - y) / mem_css * 100 for y in mem_y]
        efficiency = [a / b for a, b in zip(comm_y, proc_y)]
        rb_y = [a + b for a, b in zip(prb_y, srb_y)]
        average_coasted = [0 if b == 0 else a / b for a, b in zip(coast_y, rb_y)]
        premote = [(a + b) / (a + b + c + d) for a, b, c, d in zip(remotep_y, remoten_y, localp_y, localn_y)]
        remote = [(a + b) for a, b in zip(remotep_y, remoten_y)]

        addLineXY(speedup_lines, ssp_x, speedup_y, m)
        addLineXY(memory_lines, ssp_x, mem_reduction, m)
        addLineXY(efficiency_lines, ssp_x, efficiency, m)
#        addLineXY(event_rate_lines, ssp_x, event_rate, m)
        addLineXY(rollback_lines, ssp_x, rb_y, m)
#        addLineXY(coasted_lines, ssp_x, average_coasted, m)
#        addLineXY(premote_lines, ssp_x, premote, m)
        addLineXY(remote_lines, ssp_x, remote, m)

    addPlotXY(plots, "", "State Saving Period", "Speedup", speedup_lines)
    addPlotXY(plots, "", "State Saving Period", "% Decrease", memory_lines)
#    addPlotXY(plots, "", "State Saving Period", "Average Coast Forward Events", coasted_lines)
    addPlotXY(plots, "", "State Saving Period", "Efficiency", efficiency_lines)
    addPlotXY(plots, "", "State Saving Period", "Total Rollbacks", rollback_lines)
#    addPlotXY(plots, "", "State Saving Period", "Event Rate", event_rate_lines)
#    addPlotXY(plots, "", "State Saving Period", "% Remote", premote_lines)
    addPlotXY(plots, "", "State Saving Period", "Remote Events", remote_lines)

    for i, p in enumerate(plots):
        fig = plt.figure(i)
        plt.title(p["title"])
        plt.xlabel(p["xlabel"])
        plt.ylabel(p["ylabel"])
        
        legend_entries = list()
        for l in p["lines"]:
            plt.plot(l["xvals"], l["yvals"], marker='o')
            legend_entries.append(l["legend_title"])

        plt.legend(legend_entries) 

    plt.show()



if __name__ == '__main__':
    main()


