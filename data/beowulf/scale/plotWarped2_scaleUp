#!/usr/bin/python

import numpy as np
import matplotlib.pyplot as plt
import re

models = ["traffic"];
aggregate = [1, 5]
dimension = [64, 128, 256, 512, 1024];
warped_data_path = "."

def filenames(agg):
    for dim in dimension:
        filename = str(dim)+"x"+str(dim)+"/8n7wt7sq25ssp500gvtp{}agg_block.csv".format(agg)
        yield filename

def filter_total_lines(f):
    for line in f:
        if "Total" in line:
            yield line

def addPlotXY(plots, title, xlab, ylab, lines):
    new_plot = {"title": title, "xlabel": xlab, "ylabel": ylab, "lines": lines}
    plots.append(new_plot)

def addLineXY(lines, xvals, yvals, leg):
    new_line = {"xvals": xvals, "yvals": yvals, "legend_title": leg}
    lines.append(new_line)

def autolabel(rects):
    # attach some text labels
    for rect in rects:
        height = rect.get_height()
        plt.text(rect.get_x()+rect.get_width()/2.0, 1.01*height, '%.02f'%float(height), ha='center', va='bottom')

def main():

    plots = list()

    efficiency_lines = list()
    memory_lines = list()
    premote_lines = list()
    time_lines = list()
    event_rate_lines = list()
    arl_lines = list()

    for m in models:

        for agg in aggregate:

            lps_x = list()
            time_y = list()
            comm_y = list()
            proc_y = list()
            memory_y = list()
            local_y = list()
            remote_y = list()
            prb_y = list()
            srb_y = list()

            f = filenames(agg)
            for filename in f:
                # obtain configs from filename
                dim_x, dim_y, nodes, wt, sq, ssp, gvtp, ag = re.findall(r'\d+', filename)

                if ag != str(agg):
                    continue


                with open("{}/{}/{}".format(warped_data_path, m, filename)) as plotpoint:
                    ydata = np.genfromtxt(filter_total_lines(plotpoint), delimiter=",",
                        names=['node', 'time', 'lps', 'localp', 'remotep', 'localn', 'remoten',
                               'prollbacks', 'srollbacks', 'coasted','cancelled', 'processed',
                               'committed', 'memory'])

                lps_x.append(np.mean(ydata['lps']))

                time_y.append(np.mean(ydata['time']))
                comm_y.append(np.mean(ydata['committed']))
                proc_y.append(np.mean(ydata['processed']))
                memory_y.append(np.mean(ydata['memory']))
                local_y.append(np.mean(ydata['localp'])+np.mean(ydata['localn']))
                remote_y.append(np.mean(ydata['remotep'])+np.mean(ydata['remoten']))
                prb_y.append(np.mean(ydata['prollbacks']))
                srb_y.append(np.mean(ydata['srollbacks']))

                efficiency = [a / b * 100 for a, b in zip(comm_y, proc_y)]
                premote = [a / (a + b) * 100 for a, b in zip(remote_y, local_y)]
                event_rate = [a / b for a, b in zip(comm_y, time_y)]
                arl = [(a - b) / (c + d) for a, b, c, d in zip(proc_y, comm_y, srb_y, prb_y)]

            addLineXY(efficiency_lines, lps_x, efficiency, "{}-{}".format(m, agg))
            addLineXY(premote_lines, lps_x, premote, "{}-{}".format(m, agg))
            addLineXY(memory_lines, lps_x, memory_y, "{}-{}".format(m, agg))
#            addLineXY(time_lines, lps_x, time_y, "{}-{}".format(m, agg))
            addLineXY(event_rate_lines, lps_x, event_rate, "{}-{}".format(m, agg))
            addLineXY(arl_lines, lps_x, arl, "{}-{}".format(m, agg))

    addPlotXY(plots, "", "# LPs", "Efficiency (%)", efficiency_lines)
    addPlotXY(plots, "", "# LPs", "% Remote", premote_lines)
    addPlotXY(plots, "", "# LPs", "Average Peak Memory", memory_lines)
#    addPlotXY(plots, "", "# LPs", "Runtime (s)", time_lines)
    addPlotXY(plots, "", "#LPs", "Event Rate", event_rate_lines)
    addPlotXY(plots, "", "#LPs", "Average Rollback Length", arl_lines)

    for i, p in enumerate(plots):
        fig = plt.figure(i)
        plt.title(p["title"])
        plt.xlabel(p["xlabel"], fontsize=20)
        plt.ylabel(p["ylabel"], fontsize=20)

        plt.xlim(64*64, 1024*1024)
        plt.xscale('log', basex=2)

        legend_entries = list()
        for l in p["lines"]:
            plt.plot(l["xvals"], l["yvals"], marker='o')
            legend_entries.append(l["legend_title"])

        plt.grid()
        plt.legend(legend_entries, loc='upper center', bbox_to_anchor=(0.5, 1.10), ncol=4, fancybox=True, shadow=True)

    plt.show()

if __name__ == '__main__':
    main()


