#!/usr/bin/python

import numpy as np
import matplotlib.pyplot as plt
import re

models = ["pcs", "traffic", "epidemic"];
parttypes = ["block", "pg", "rr"];
warped_data_path = "."

def filenames():
    for pt in parttypes:
        filename = "1n7wt7sq25ssp1000gvtp_{}.csv".format(pt)
        yield filename

def filter_total_lines(f):
    for line in f:
        if "Total" in line:
            yield line

def addPlotXY(plots, title, xlab, ylab, lines):
    new_plot = {"title": title, "xlabel": xlab, "ylabel": ylab, "lines": lines}
    plots.append(new_plot)

def addLineXY(lines, xvals, yvals, leg):
    new_line = {"xvals": xvals, "yvals": yvals, "legend_title": leg}
    lines.append(new_line)

def autolabel(rects):
    # attach some text labels
    for rect in rects:
        height = rect.get_height()
        plt.text(rect.get_x()+rect.get_width()/2.0, 1.01*height, '%.02f'%float(height), ha='center', va='bottom')

def main():

    times_by_model_block = list()
    times_by_model_pg = list()
    times_by_model_rr = list()

    efficiency_by_model_block = list()
    efficiency_by_model_pg = list()
    efficiency_by_model_rr = list()

    premote_by_model_block = list()
    premote_by_model_pg = list()
    premote_by_model_rr = list()

    for m in models:
        f = filenames()
        for filename in f:
            # obtain configs from filename
            nodes, wt, sq, ssp, gvtp = re.findall(r'\d+', filename)

            with open("{}/{}/multiple/{}".format(warped_data_path, m, filename)) as plotpoint:
                ydata = np.genfromtxt(filter_total_lines(plotpoint), delimiter=",",
                    names=['node', 'time', 'objects', 'localp', 'remotep', 'localn', 'remoten',
                           'prollbacks', 'srollbacks', 'coasted','cancelled', 'processed',
                           'committed', 'memory'])

            efficiency = np.mean(ydata['committed']) / np.mean(ydata['processed']) * 100

            premote = (np.mean(ydata['remotep']) + np.mean(ydata['remoten'])) / \
            (np.mean(ydata['remotep']) + np.mean(ydata['remoten']) + np.mean(ydata['localp']) + np.mean(ydata['localn'])) * \
            100

            if "block" in filename:
                times_by_model_block.append(np.mean(ydata['time']))
                efficiency_by_model_block.append(efficiency)
                premote_by_model_block.append(premote)
            elif "rr" in filename:
                times_by_model_rr.append(np.mean(ydata['time']))
                efficiency_by_model_rr.append(efficiency)
                premote_by_model_rr.append(premote)
            elif "pg" in filename:
                times_by_model_pg.append(np.mean(ydata['time']))
                efficiency_by_model_pg.append(efficiency)
                premote_by_model_pg.append(premote)

    index = np.arange(3)
    index = index
    bar_width = 0.30
    rects1 = plt.bar(index, times_by_model_rr, bar_width,
            color='g', label='Round-Robin', alpha=0.7)
    rects2 = plt.bar(index+bar_width, times_by_model_pg , bar_width,
            color='b', label = 'Profile-Guided', alpha=0.7)
    rects3 = plt.bar(index+2*bar_width, times_by_model_block, bar_width,
            color='r', label = 'Block', alpha=0.7)

    autolabel(rects1)
    autolabel(rects2)
    autolabel(rects3)
    plt.xlim(-bar_width, len(index)+bar_width)
    plt.xlabel('Model')
    plt.ylabel('Simulation Times (s)')
    plt.xticks(index+2*bar_width, ('PCS', 'Traffic', 'Epidemic'))
    plt.legend()
    plt.show()

    rects1 = plt.bar(index, efficiency_by_model_rr, bar_width,
            color='g', label='Round-Robin', alpha=0.7)
    rects2 = plt.bar(index+bar_width, efficiency_by_model_pg , bar_width,
            color='b', label = 'Profile-Guided', alpha=0.7)
    rects3 = plt.bar(index+2*bar_width, efficiency_by_model_block, bar_width,
            color='r', label = 'Block', alpha=0.7)

    autolabel(rects1)
    autolabel(rects2)
    autolabel(rects3)
    plt.xlim(-bar_width, len(index)+bar_width)
    plt.xlabel('Model')
    plt.ylabel('Efficiency (%)')
    plt.xticks(index+2*bar_width, ('PCS', 'Traffic', 'Epidemic'))
    plt.legend()
    plt.show()

    rects1 = plt.bar(index, premote_by_model_rr, bar_width,
            color='g', label='Round-Robin', alpha=0.7)
    rects2 = plt.bar(index+bar_width, premote_by_model_pg , bar_width,
            color='b', label = 'Profile-Guided', alpha=0.7)
    rects3 = plt.bar(index+2*bar_width, premote_by_model_block, bar_width,
            color='r', label = 'Block', alpha=0.7)

    autolabel(rects1)
    autolabel(rects2)
    autolabel(rects3)
    plt.xlim(-bar_width, len(index)+bar_width)
    plt.xlabel('Model')
    plt.ylabel('Remote Events (%)')
    plt.xticks(index+2*bar_width, ('PCS', 'Traffic', 'Epidemic'))
    plt.legend()
    plt.show()


    plots = list()

    for m in models:
    
        time_lines = list()
        speedup_lines = list()
        efficiency_lines = list()
        memory_lines = list()
        premote_lines = list()
        rollback_lines = list()

        for pt in parttypes:

            nodes_x = list()
            time_y = list()
            speedup_y = list()
            comm_y = list()
            proc_y = list()
            memory_y = list()
            local_y = list()
            remote_y = list()
            prb_y = list()
            srb_y = list()

            single_node_time = 0;

            f = filenames()
            for filename in f:
                # obtain configs from filename
                nodes, wt, sq, ssp, gvtp = re.findall(r'\d+', filename)

                if pt not in filename:
                    continue

                with open("{}/{}/multiple/{}".format(warped_data_path, m, filename)) as plotpoint:
                    ydata = np.genfromtxt(filter_total_lines(plotpoint), delimiter=",",
                        names=['node', 'time', 'objects', 'localp', 'remotep', 'localn', 'remoten',
                               'prollbacks', 'srollbacks', 'coasted','cancelled', 'processed',
                               'committed', 'memory'])

                if nodes == '1':
                    single_node_time = np.mean(ydata['time'])

                nodes_x.append(nodes)
                time_y.append(np.mean(ydata['time']))
                comm_y.append(np.mean(ydata['committed']))
                proc_y.append(np.mean(ydata['processed']))
                memory_y.append(np.mean(ydata['memory']))
                local_y.append(np.mean(ydata['localp'])+np.mean(ydata['localn']))
                remote_y.append(np.mean(ydata['remotep'])+np.mean(ydata['remoten']))
                prb_y.append(np.mean(ydata['prollbacks']))
                srb_y.append(np.mean(ydata['srollbacks']))

            speedup = [single_node_time / a for a in time_y]
            efficiency = [a / b * 100 for a, b in zip(comm_y, proc_y)]
            premote = [a / (a + b) * 100 for a, b in zip(remote_y, local_y)]
            rollbacks = [(a + b) for a, b in zip(prb_y, srb_y)]

#            addLineXY(time_lines, nodes_x, time_y, pt)
#            addLineXY(speedup_lines, nodes_x, speedup, pt)
#            addLineXY(efficiency_lines, nodes_x, efficiency, pt)
#            addLineXY(memory_lines, nodes_x, memory_y, pt)
#            addLineXY(premote_lines, nodes_x, premote, pt)
#            addLineXY(rollback_lines, nodes_x, rollbacks, pt)

#        addPlotXY(plots, "{}".format(m), "# Nodes", "Simulation Time (s)", time_lines)
#        addPlotXY(plots, "{}".format(m), "# Nodes", "Speedup", speedup_lines)
#        addPlotXY(plots, "{}".format(m), "# Nodes", "Efficiency (%)", efficiency_lines)
#        addPlotXY(plots, "{}".format(m), "# Nodes", "Memory", memory_lines)
#        addPlotXY(plots, "{}".format(m), "# Nodes", "% Remote", premote_lines)
#        addPlotXY(plots, "{}".format(m), "# Nodes", "Total Rollbacks", rollback_lines)

    for i, p in enumerate(plots):
        fig = plt.figure(i)
        plt.title(p["title"])
        plt.xlabel(p["xlabel"])
        plt.ylabel(p["ylabel"])
        
        legend_entries = list()
        for l in p["lines"]:
            plt.plot(l["xvals"], l["yvals"], marker='o')
            legend_entries.append(l["legend_title"])

        plt.legend(legend_entries) 

    plt.show()

if __name__ == '__main__':
    main()


