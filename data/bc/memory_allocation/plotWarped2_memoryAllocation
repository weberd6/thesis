#!/usr/bin/python

import numpy as np
import matplotlib.pyplot as plt
import re
import math

models = ["traffic"];
mallocs = ["tcmalloc", "ptmalloc2", "jemalloc", "supermalloc", "supermalloc_pthread", "hoard", "ltalloc"];

warped_data_path = "."

def filenames():
    for wt in range(1, 11):
        filename = "1n{}wt{}sq25ssp100gvtp_pg.csv".format(wt, wt)
        yield filename

def filter_total_lines(f):
    for line in f:
        if "Total" in line:
            yield line

def addPlotXY(plots, title, xlab, ylab, lines):
    new_plot = {"title": title, "xlabel": xlab, "ylabel": ylab, "lines": lines}
    plots.append(new_plot)

def addLineXY(lines, xvals, yvals, std, leg):
    new_line = {"xvals": xvals, "yvals": yvals, "std": std, "legend_title": leg}
    lines.append(new_line)

def autolabel(rects):
    # attach some text labels
    for rect in rects:
        height = rect.get_height()
        if rect.get_y() >= 0:
            plt.text(rect.get_x()+rect.get_width()/2.0, 1.05*height, '%.02f'%float(height), ha='center', va='bottom')
        else:
            plt.text(rect.get_x()+rect.get_width()/2.0, -1.25*height, '%.02f'%float(-height), ha='center', va='bottom')

def main():

    plots = list()

    for m in models:

        memory_lines = list()
        time_lines = list()
        efficiency_lines = list()
        event_rate_lines = list()
        speedup_lines = list()

        singlewt_time = 0

        for malloc in mallocs:
            wt_x = list()
            mem_y = list()
            mem_std = list()
            time_y = list()
            time_std = list()
            proc_y = list()
            proc_std = list()
            comm_y = list()

            f = filenames()
            for filename in f:
                # obtain configs from filename
                nodes, wt, sq, ssp, gvtp = re.findall(r'\d+', filename)

                with open("{}/{}/{}/{}".format(warped_data_path, m, malloc, filename)) as plotpoint:
                    ydata = np.genfromtxt(filter_total_lines(plotpoint), delimiter=",",
                        names=['node', 'time', 'objects', 'localp', 'remotep', 'localn', 'remoten',
                               'prollbacks', 'srollbacks', 'coasted','cancelled', 'processed',
                               'committed', 'memory'])

                if (wt == '1'):
                    singlewt_time = np.mean(ydata['time'])

                wt_x.append(wt)
                proc_y.append(np.mean(ydata['processed']))
                proc_std.append(np.std(ydata['processed']))
                comm_y.append(np.mean(ydata['committed']))
                mem_y.append(np.mean(ydata['memory']))
                mem_std.append(np.std(ydata['memory']))
                time_y.append(np.mean(ydata['time']))
                time_std.append(np.std(ydata['time']))

            efficiency_y = [a / b for a, b in zip(comm_y, proc_y)]
            event_rate = [a / b for a, b in zip(comm_y, time_y)]
            speedup = [singlewt_time / a for a in time_y]

            eventrate_stddev = [abs(a * b / c) for a, b, c in zip(event_rate, time_std, time_y)]
            efficiency_stddev = [abs(a * b / c) for a, b, c in zip(efficiency_y, proc_std, proc_y)]

#            addLineXY(memory_lines, wt_x, mem_y, mem_std, malloc)
#            addLineXY(time_lines, wt_x, time_y, mem_std, malloc)
            addLineXY(efficiency_lines, wt_x, efficiency_y, efficiency_stddev, malloc)
            addLineXY(event_rate_lines, wt_x, event_rate, eventrate_stddev, malloc)
#            addLineXY(speedup_lines, wt_x, speedup, None, malloc)

        addPlotXY(plots, "", "Worker Threads", "Efficiency", efficiency_lines)
#        addPlotXY(plots, "({})".format(m), "Worker Threads", "Average Peak Memory", memory_lines)
#        addPlotXY(plots, "({})".format(m), "Worker Threads", "Simulation Time (s)", time_lines)
        addPlotXY(plots, "", "Worker Threads", "Event Rate", event_rate_lines)
#        addPlotXY(plots, "({})".format(m), "Worker Threads", "Speedup", speedup_lines)

    for i, p in enumerate(plots):
        fig = plt.figure(i)
        plt.title(p["title"])
        plt.xlabel(p["xlabel"], fontsize=20)
        plt.ylabel(p["ylabel"], fontsize=20)
        plt.xlim(1, 10)
        
        legend_entries = list()
        for l in p["lines"]:
            if (l["std"] == None):
                plt.plot(l["xvals"], l["yvals"], marker='o')
            else:
                plt.errorbar(l["xvals"], l["yvals"], l["std"], marker='o')
            legend_entries.append(l["legend_title"])

        ax = plt.subplot(111)
        box = ax.get_position()
        ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
        plt.legend(legend_entries, loc='center left', bbox_to_anchor=(1, 0.5), fancybox=True, shadow=True)
        plt.grid()

    plt.show()


if __name__ == '__main__':
    main()


