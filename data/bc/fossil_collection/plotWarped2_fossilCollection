#!/usr/bin/python

import numpy as np
import matplotlib.pyplot as plt
import re

gvt_period_list = [1, 5, 10, 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000];
models = ["epidemic", "pcs", "traffic", "airport"];
fcmethods = ["fcm", "fcw"];

warped_data_path = "."

def filenames():
    for gvtp in gvt_period_list:
        filename = "1n10wt10sq25ssp{}gvtp_pg.csv".format(gvtp)
        yield filename

def filter_total_lines(f):
    for line in f:
        if "Total" in line:
            yield line

def addPlotXY(plots, title, xlab, ylab, lines):
    new_plot = {"title": title, "xlabel": xlab, "ylabel": ylab, "lines": lines}
    plots.append(new_plot)

def addLineXY(lines, xvals, yvals, leg):
    new_line = {"xvals": xvals, "yvals": yvals, "legend_title": leg}
    lines.append(new_line)

def autolabel(rects):
    # attach some text labels
    for rect in rects:
        height = rect.get_height()
        plt.text(rect.get_x()+rect.get_width()/2.0, 1.05*height, '%d'%height, ha='center', va='bottom')

def main():

    plots = list()

    for fcmethod in fcmethods:
        memory_lines = list()
        time_lines = list()
        for m in models:
            gvtp_x = list()
            mem_y = list()
            time_y = list()

            f = filenames()
            for filename in f:
                # obtain configs from filename
                nodes, wt, sq, ssp, gvtp = re.findall(r'\d+', filename)

                with open("{}/{}/{}/{}".format(warped_data_path, m, fcmethod, filename)) as plotpoint:
                    ydata = np.genfromtxt(filter_total_lines(plotpoint), delimiter=",",
                        names=['node', 'time', 'objects', 'localp', 'remotep', 'localn', 'remoten',
                               'prollbacks', 'srollbacks', 'coasted','cancelled', 'processed',
                                'committed', 'memory'])

                gvtp_x.append(gvtp)
                mem_y.append(np.mean(ydata['memory']))
                time_y.append(np.mean(ydata['time']))

            addLineXY(memory_lines, gvtp_x, mem_y, m)
            addLineXY(time_lines, gvtp_x, time_y, m)

        addPlotXY(plots, "".format(fcmethod), "GVT Period", "Simulation Time (s)", time_lines)
        addPlotXY(plots, "".format(fcmethod), "GVT Period", "Average Peak Memory", memory_lines)


    fcm_times_by_model = list()
    fcw_times_by_model = list()
    fcm_commits_by_model = list()
    fcw_commits_by_model = list()

    for m in models:
        for fcmethod in fcmethods:
            average_time = list()
            average_commit = list()
            f = filenames()
            for filename in f:
                # obtain configs from filename
                nodes, wt, sq, ssp, gvtp = re.findall(r'\d+', filename)

                with open("{}/{}/{}/{}".format(warped_data_path, m, fcmethod, filename)) as plotpoint:
                    ydata = np.genfromtxt(filter_total_lines(plotpoint), delimiter=",",
                        names=['node', 'time', 'objects', 'localp', 'remotep', 'localn', 'remoten',
                               'prollbacks', 'srollbacks', 'coasted','cancelled', 'processed',
                                'committed', 'memory'])

                if gvtp == '100':
                    average_time.append(np.mean(ydata['time']))
                    average_commit.append(np.mean(ydata['committed']))

            if fcmethod == "fcw":
                fcw_times_by_model.append(average_time[0])
                fcw_commits_by_model.append(average_commit[0])
            else:
                fcm_times_by_model.append(average_time[0])
                fcm_commits_by_model.append(average_commit[0])


    fcm_commit_rate_by_model = [a / b for a, b in zip(fcm_commits_by_model, fcm_times_by_model)]
    fcw_commit_rate_by_model = [a / b for a, b in zip(fcw_commits_by_model, fcw_times_by_model)]

    index = np.arange(4)
    bar_width = 0.35
    rects1 = plt.bar(index, fcm_commit_rate_by_model, bar_width,
            color='b', label='Manager', alpha=0.7)
    rects2 = plt.bar(index+bar_width, fcw_commit_rate_by_model, bar_width,
            color='r', label = 'Worker', alpha=0.7)
    #autolabel(rects1)
    #autolabel(rects2)
    plt.xlim(-bar_width, len(index)+bar_width)
    plt.xlabel('Model')
    plt.ylabel('Event Rate')
    plt.xticks(index + bar_width, models)
    plt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.10), ncol=4, fancybox=True, shadow=True)
    plt.grid()
    plt.show()

    for i, p in enumerate(plots):
        fig = plt.figure(i)
        plt.title(p["title"])
        plt.xlabel(p["xlabel"])
        plt.ylabel(p["ylabel"])
        
        legend_entries = list()
        for l in p["lines"]:
            plt.plot(l["xvals"], l["yvals"], marker='o')
            legend_entries.append(l["legend_title"])

        plt.legend(legend_entries, loc='upper center', bbox_to_anchor=(0.5, 1.10), ncol=4, fancybox=True, shadow=True)
        plt.grid()

    plt.show()



if __name__ == '__main__':
    main()


